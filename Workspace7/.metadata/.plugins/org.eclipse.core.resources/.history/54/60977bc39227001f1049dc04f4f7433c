package co.edu.uco.deviucopay.controller;

import java.util.List;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import co.edu.uco.deviucopay.business.facade.impl.cuenta.ConsultarCuentaFacade;
import co.edu.uco.deviucopay.business.facade.impl.cuenta.EliminarCuentaFacade;
import co.edu.uco.deviucopay.business.facade.impl.cuenta.LoginCuentaFacade;
import co.edu.uco.deviucopay.business.facade.impl.cuenta.ModificarCuentaFacade;
import co.edu.uco.deviucopay.business.facade.impl.cuenta.RegistrarCuentaFacade;
import co.edu.uco.deviucopay.controller.response.CuentaResponse;
import co.edu.uco.deviucopay.crosscutting.exceptions.DeviUcopayException;
import co.edu.uco.deviucopay.dto.CuentaDTO;
import co.edu.uco.deviucopay.dto.LoginDTO;

@RestController
@RequestMapping("/api/v1/cuenta")
public class CuentaController {

    @GetMapping("/dummy")
    public CuentaDTO dummy() {
        return CuentaDTO.build();
    }
    @CrossOrigin(origins = "http://localhost:8080")
    @GetMapping
    public ResponseEntity<CuentaResponse> consultar() {
        var httpStatusCode = HttpStatus.ACCEPTED;
        var cuentaResponse = new CuentaResponse();

        try {
            var cuentaDto = CuentaDTO.build();
            var facade = new ConsultarCuentaFacade();
            cuentaResponse.setDatos(facade.execute(cuentaDto));
            cuentaResponse.getMensajes().add("Cuentas Consultadas Exitosamente");
        } catch (final DeviUcopayException excepcion) {
            httpStatusCode = HttpStatus.BAD_REQUEST;
            cuentaResponse.getMensajes().add(excepcion.getMensajeUsuario());
            excepcion.printStackTrace();
        } catch (final Exception excepcion) {
            httpStatusCode = HttpStatus.INTERNAL_SERVER_ERROR;
            var mensajeUsuario = "Se ha presentado un problema tratando de consultar la información de la cuenta";
            cuentaResponse.getMensajes().add(mensajeUsuario);
            excepcion.printStackTrace();
        }

        return new ResponseEntity<>(cuentaResponse, httpStatusCode);
    }
    
    @PostMapping("/registro")
    @CrossOrigin(origins = "http://localhost:8080")
    public ResponseEntity<CuentaResponse> crearCuenta(@RequestBody CuentaDTO cuenta) {
        var httpStatusCode = HttpStatus.ACCEPTED;
        var cuentaResponse = new CuentaResponse();

        try {
            var facade = new RegistrarCuentaFacade();
            facade.execute(cuenta); 
            cuentaResponse.getMensajes().add("Cuenta creada exitosamente");
        } catch (final DeviUcopayException excepcion) {
            httpStatusCode = HttpStatus.BAD_REQUEST;
            cuentaResponse.getMensajes().add(excepcion.getMensajeUsuario());
            excepcion.printStackTrace();
        } catch (final Exception excepcion) {
            httpStatusCode = HttpStatus.INTERNAL_SERVER_ERROR;
            var mensajeUsuario = "Se ha presentado un problema tratando de crear la nueva cuenta";
            cuentaResponse.getMensajes().add(mensajeUsuario);
            excepcion.printStackTrace();
        }

        return new ResponseEntity<>(cuentaResponse, httpStatusCode);
    }
    @PostMapping("/login")
    public ResponseEntity<CuentaResponse> login(@RequestBody LoginDTO loginDTO) {
        var cuentaResponse = new CuentaResponse();
        HttpStatus codigoHttp = HttpStatus.BAD_REQUEST;

        try {
            LoginCuentaFacade facade = new LoginCuentaFacade();
            var cuentaDTO = facade.execute(loginDTO);
            cuentaResponse.setDatos(List.of(cuentaDTO));
            cuentaResponse.getMensajes().add("Login exitoso");
            codigoHttp = HttpStatus.OK;
        } catch (final DeviUcopayException e) {
            cuentaResponse.getMensajes().add(e.getMensajeUsuario());
            e.printStackTrace();
        } catch (final Exception e) {
            cuentaResponse.getMensajes().add("Se ha presentado un problema durante el login");
            e.printStackTrace();
        }

        return new ResponseEntity<>(cuentaResponse, codigoHttp);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<CuentaResponse> modificar(@PathVariable UUID id, @RequestBody CuentaDTO cuentaDto) {
        var httpStatusCode = HttpStatus.ACCEPTED;
        var cuentaResponse = new CuentaResponse();

        try {
            var facade = new ModificarCuentaFacade();
            facade.execute(cuentaDto);
            cuentaResponse.getMensajes().add("Cuenta modificada exitosamente");
        } catch (final DeviUcopayException excepcion) {
            httpStatusCode = HttpStatus.BAD_REQUEST;
            cuentaResponse.getMensajes().add(excepcion.getMensajeUsuario());
            excepcion.printStackTrace();
        } catch (final Exception excepcion) {
            httpStatusCode = HttpStatus.INTERNAL_SERVER_ERROR;
            var mensajeUsuario = "Se ha presentado un problema tratando de modificar la información de la cuenta";
            cuentaResponse.getMensajes().add(mensajeUsuario);
            excepcion.printStackTrace();
        }

        return new ResponseEntity<>(cuentaResponse, httpStatusCode);
    }
    
    @DeleteMapping("/{numeroCuenta}")
    public ResponseEntity<CuentaResponse> eliminarCuenta(@PathVariable String numeroCuenta) {
        var cuentaResponse = new CuentaResponse();
        HttpStatus httpStatusCode = HttpStatus.ACCEPTED;

        try {
            var facade = new EliminarCuentaFacade();
            facade.execute(new CuentaDTO().setNumeroCuenta(numeroCuenta));
            cuentaResponse.getMensajes().add("Cuenta eliminada exitosamente");
        } catch (final DeviUcopayException excepcion) {
            httpStatusCode = HttpStatus.BAD_REQUEST;
            cuentaResponse.getMensajes().add(excepcion.getMensajeUsuario());
            excepcion.printStackTrace();
        } catch (final Exception excepcion) {
            httpStatusCode = HttpStatus.INTERNAL_SERVER_ERROR;
            var mensajeUsuario = "Se ha presentado un problema tratando de eliminar la cuenta";
            cuentaResponse.getMensajes().add(mensajeUsuario);
            excepcion.printStackTrace();
        }

        return new ResponseEntity<>(cuentaResponse, httpStatusCode);
    }
    
}
